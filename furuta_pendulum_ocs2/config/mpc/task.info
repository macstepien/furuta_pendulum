; furuta_pendulum_interface settings
furuta_pendulum_interface
{
  recompileLibraries       1    ; put this flag to 1 to force recompilation of dynamics library
}

; furuta pendulum parameters
furuta_pendulum_parameters
{
  m1 0.040466
  m2 0.009801
  l1 0.05415
  l2 0.096608
  L1 0.093525
  L2 0.129
  b1 0.0
  b2 1.7905703040590617e-05
  J1 0.000024054318
  J2 0.000014790595
}

control_signal_bound 0.43

; DDP settings
ddp
{
  ; It should be either SLQ or ILQR
  algorithm                      iLQR

  nThreads                       12

  ; Maximum number of iterations of DDP
  maxNumIterations               10
  ; This value determines the termination condition based on the minimum relative changes of the cost.
  minRelCost                     0.1
  ; This value determines the tolerance of constraint's ISE (Integral of Square Error).
  constraintTolerance            1e-3

  displayInfo                    false
  displayShortSummary            false
  checkNumericalStability        false
  debugPrintRollout              false

  ; This value determines the absolute tolerance error for ode solvers.
  AbsTolODE                      2e-5
  ; This value determines the relative tolerance error for ode solvers.
  RelTolODE                      1e-3
  ; This value determines the maximum number of integration points per a second for ode solvers. 
  maxNumStepsPerSecond           100000
  ; The integration time step for Riccati equation which is used for fixed timestep integration scheme
  timeStep                       0.002
  ; The backward pass integrator type: SLQ uses it for solving Riccati equation and ILQR uses it for discretizing LQ approximation.
  backwardPassIntegratorType     ODE45

  ; slq settings
  inequalityConstraintMu         100.0
  inequalityConstraintDelta      1.1

  ; If true, terms of the Riccati equation will be pre-computed before interpolation in the flow-map
  preComputeRiccatiTerms         true

  ; Use either the optimized control policy (true) or the optimized state-input trajectory (false).
  ; crucial
  useFeedbackPolicy              true

  strategy                       LINE_SEARCH
  lineSearch
  {
    minStepLength                0.1
    maxStepLength                1.0
    hessianCorrectionStrategy    EIGENVALUE_MODIFICATION
    hessianCorrectionMultiple    1e-3
  }
}

; Rollout settings
rollout
{
  ; This value determines the absolute tolerance error for ode solvers.
  AbsTolODE                    2e-5
  
  ; This value determines the relative tolerance error for ode solvers.
  RelTolODE                    1e-3
  
  ; The integration time step for Riccati equation which is used for fixed timestep integration scheme.
  timeStep                     0.002
  
  ; This value determines the maximum number of integration points per a second for ode solvers.
  maxNumStepsPerSecond         100000
  
  ; Check the numerical stability of the algorithms for debugging purpose
  checkNumericalStability      false
  
  integratorType               ODE45
}

; MPC settings
mpc
{
  debugPrint                  false
  
  timeHorizon                 1.5   ; [s]

  ; The time window (in seconds) for retrieving the optimized outputs (controller and state-input
  ; trajectories). Any negative number will be interpreted as the whole time horizon.
  solutionTimeWindow          -1    ; maximum [s]


  ; This value determines to initialize the SLQ with the controller from previous call (warm start)
  ; or the given operating trajectories (cold start).
  coldStart                   false

  ; MPC loop frequency in Hz. This setting is only used in Dummy_Loop for testing. If set to a
  ; positive number, THe MPC loop will be simulated to run by the given frequency (note that this
  ; might not be the MPC's real-time frequency). Any negative number will cause the MPC loop to run
  ; by its maximum possible frequency.
  mpcDesiredFrequency         200   ; [Hz]

  ; MRT loop frequency in Hz. This setting is only used in Dummy_Loop for testing. This should always
  ; set to a positive number which can be interpreted as the tracking controller's frequency.
  mrtDesiredFrequency         500   ; [Hz]
}

bounds_penalty_config
{
  scale                       0.1
  stepSize                    1.0
}

; initial state
initialState
{
  (0,0) 0.0   ; theta
  (1,0) 0.0    ; x
  (2,0) 0.0    ; theta_dot
  (3,0) 0.0    ; x_dot
}

; state weight matrix
Q
{
  (0,0)  0.0   ; theta
  (1,1)  17.0   ; x
  (2,2)  0.5   ; theta_dot
  (3,3)  1.5   ; x_dot
}


; control weight matrix
R
{
  (0,0)  0.1
}


; final state weight matrix
Q_final
{
  (0,0)  0.0  ; theta
  (1,1)  17.0  ; x
  (2,2)  0.5  ; theta_dot
  (3,3)  1.5  ; x_dot
}

; final goal
x_final
{
  (0,0)  0.0  ; theta
  (1,0)  3.14159265359  ; x
  (2,0)  0.0  ; theta_dot
  (3,0)  0.0  ; x_dot
}
