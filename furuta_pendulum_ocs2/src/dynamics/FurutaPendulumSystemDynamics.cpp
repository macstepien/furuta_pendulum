// Based on ocs2 ballbot example

#include <furuta_pendulum_ocs2/dynamics/FurutaPendulumSystemDynamics.h>

// robcogen
#include <iit/rbd/rbd.h>
#include <iit/rbd/traits/TraitSelector.h>

#include "furuta_pendulum_ocs2/generated/forward_dynamics.h"
#include "furuta_pendulum_ocs2/generated/inertia_properties.h"
#include "furuta_pendulum_ocs2/generated/inverse_dynamics.h"
#include "furuta_pendulum_ocs2/generated/jsim.h"
#include "furuta_pendulum_ocs2/generated/transforms.h"

namespace ocs2
{
namespace furuta_pendulum
{

ad_vector_t FurutaPendulumSystemDynamics::systemFlowMap(
  ad_scalar_t time, const ad_vector_t & state, const ad_vector_t & input,
  const ad_vector_t & parameters) const
{
  // test for the autogenerated code
  iit::FurutaPendulum::tpl::JointState<ad_scalar_t> qdd;
  iit::FurutaPendulum::tpl::JointState<ad_scalar_t> new_input;
  new_input(0) = input(0);
  new_input(1) = 0.0;

  using trait_t = typename iit::rbd::tpl::TraitSelector<ad_scalar_t>::Trait;
  iit::FurutaPendulum::dyn::tpl::InertiaProperties<trait_t> inertias;
  iit::FurutaPendulum::tpl::MotionTransforms<trait_t> transforms;
  iit::FurutaPendulum::dyn::tpl::ForwardDynamics<trait_t> forward_dyn(inertias, transforms);
  forward_dyn.fd(qdd, state.head<2>(), state.tail<2>(), new_input);

  // dxdt
  ad_vector_t stateDerivative(4);
  stateDerivative << state.tail<2>(), qdd;
  return stateDerivative;
}

}  // namespace furuta_pendulum
}  // namespace ocs2
